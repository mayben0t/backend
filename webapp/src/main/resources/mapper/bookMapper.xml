<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
         PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.webapp.dao.BookMapper">

    <resultMap id="Base_Result_Type" type="com.example.api.model.Book">
        <result column="id" property="id" jdbcType="INTEGER"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="author" property="author" jdbcType="VARCHAR"/>
        <result column="publish" property="publish" jdbcType="VARCHAR"/>
        <result column="pages" property="pages" jdbcType="INTEGER"/>
        <result column="price" property="price" jdbcType="DECIMAL"/>
        <result column="is_deleted" property="isDeleted" jdbcType="TINYINT"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="create_user" property="createUser" jdbcType="VARCHAR"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
        <result column="update_user" property="updateUser" jdbcType="VARCHAR"/>
    </resultMap>

    <sql id="Base_Column">
        id,`name`,author,publish,pages,price,is_deleted,create_time,create_user
        ,update_time,update_user
    </sql>


    <select id="getAll" resultMap="Base_Result_Type">
        select
        <include refid="Base_Column"/>
        from tb_book
        where is_deleted = 0
    </select>

    <select id="getAllByPage" resultMap="Base_Result_Type">
        select
        <include refid="Base_Column"/>
        from tb_book
        where is_deleted = 0
        limit #{start},#{size}
    </select>

    <select id="getCount" resultType="int">
        select count(1) from tb_book where is_deleted=0
    </select>

    <select id="getById" resultMap="Base_Result_Type">
        select
        <include refid="Base_Column"/>
        from tb_book
        where is_deleted=0
        and id=#{id}
    </select>

    <insert id="insert" parameterType="com.example.api.model.Book">
        insert into tb_book
        (`name`,author,publish,pages,price,is_deleted,create_user)
        values
        (#{name},#{author},#{publish},#{pages},#{price},#{isDeleted},#{createUser})
    </insert>

    <update id="update" parameterType="com.example.api.model.Book">
        udpate tb_book
        <set>
            <if test="name!=null and name!=''">
                name = #{name},
            </if>
            <if test="author!=null and author!=''">
                author = #{author},
            </if>
            <if test="publish!=null and publish!=''">
                publish = #{publish},
            </if>
            <if test="pages!=null">
                pages = #{pages},
            </if>
            <if test="price!=null">
                price = #{price},
            </if>
            update_time = now(),
            <if test="updateUser !=null and updateUser!=''">
                update_user = updateUser,
            </if>
        </set>
        where id = #{id} and is_deleted=0
    </update>

    <delete id="deleteById" parameterType="int">
        update tb_book
        set is_deleted=1
        where id = #{id}
    </delete>
</mapper>